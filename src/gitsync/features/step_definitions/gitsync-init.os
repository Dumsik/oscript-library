// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать asserts
#Использовать tempfiles

Перем БДД; //контекст фреймворка 1bdd

Перем Лог;

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯПодготовилТестовыйКаталог");
	ВсеШаги.Добавить("ЯУстановилТестовыйКаталогКакТекущий");
	ВсеШаги.Добавить("ЯПодключилКаталогТестовогоХранилищаКонфигурации");
	ВсеШаги.Добавить("ЯСоздалКаталогGit_Репозитория");
	ВсеШаги.Добавить("УстановилКаталогКакТекущий");
	ВсеШаги.Добавить("ЯСоздалКаталогИсходников");
	ВсеШаги.Добавить("ЯПередаюПутьТестовогоКаталогаХранилищаКонфигурацииДляЗапускаGitsync");
	ВсеШаги.Добавить("ЯПередаюПутьКаталогаИсходниковДляЗапускаGitsync");
	ВсеШаги.Добавить("ЯВыполняюКомандуGitsync");
	ВсеШаги.Добавить("ВКаталогеИсходниковСоздаетсяФайл");
	ВсеШаги.Добавить("ВКаталогеИсходниковНеСоздаетсяФайл");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры

Функция ИмяЛога() Экспорт
	Возврат "bdd.gitsync.feature";
КонецФункции

//я подготовил тестовый каталог
Процедура ЯПодготовилТестовыйКаталог() Экспорт
	ВременныйКаталог = Новый Файл(ВременныеФайлы.СоздатьКаталог());
	Лог.Отладка("Использую временный каталог "+ВременныйКаталог.ПолноеИмя);

	БДД.СохранитьВКонтекст("ВременныйКаталог", ВременныйКаталог);
КонецПроцедуры

//я установил тестовый каталог как текущий
Процедура ЯУстановилТестовыйКаталогКакТекущий() Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста("ВременныйКаталог");
	Лог.Отладка(СтрШаблон("ВременныйКаталог <%1>", ВременныйКаталог.ПолноеИмя));
	УстановитьТекущийКаталог(ВременныйКаталог.ПолноеИмя);
КонецПроцедуры

//я подключил каталог тестового хранилища конфигурации
Процедура ЯПодключилКаталогТестовогоХранилищаКонфигурации() Экспорт
	БДД.СохранитьВКонтекст("ПутьКФайлуХранилища1С", ПутьКВременномуФайлуХранилища1С());
КонецПроцедуры

//я создал каталог git-репозитория "git-repo"
Процедура ЯСоздалКаталогGit_Репозитория(Знач ПутьГитРепозитория) Экспорт
	ПутьГитРепозитория = ОбъединитьПути(ТекущийКаталог(), ПутьГитРепозитория);
	Лог.Отладка(СтрШаблон("ПутьГитРепозитория <%1>", ПутьГитРепозитория));
	КодВозврата = ИнициализироватьТестовоеХранилищеГит(ПутьГитРепозитория);
	Ожидаем.Что(КодВозврата, "неверно выполнена команда git init").Равно(0);
КонецПроцедуры

//установил каталог "git-repo" как текущий
Процедура УстановилКаталогКакТекущий(Знач ПутьКаталога) Экспорт
	УстановитьТекущийКаталог(ОбъединитьПути(ТекущийКаталог(), ПутьКаталога));
КонецПроцедуры

//я создал каталог исходников
Процедура ЯСоздалКаталогИсходников() Экспорт
	 ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ЯСоздалКаталогИсходников> не реализован", "Не реализовано.");
КонецПроцедуры

//я передаю путь тестового каталога хранилища конфигурации для запуска gitsync
Процедура ЯПередаюПутьТестовогоКаталогаХранилищаКонфигурацииДляЗапускаGitsync() Экспорт
	 ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ЯПередаюПутьТестовогоКаталогаХранилищаКонфигурацииДляЗапускаGitsync> не реализован", "Не реализовано.");
КонецПроцедуры

//я передаю путь каталога исходников для запуска gitsync
Процедура ЯПередаюПутьКаталогаИсходниковДляЗапускаGitsync() Экспорт
	 ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ЯПередаюПутьКаталогаИсходниковДляЗапускаGitsync> не реализован", "Не реализовано.");
КонецПроцедуры

//я выполняю команду gitsync "init"
Процедура ЯВыполняюКомандуGitsync(Знач ПарамСтрока1) Экспорт
	 ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ЯВыполняюКомандуGitsync> не реализован", "Не реализовано.");
КонецПроцедуры

//в каталоге исходников создается файл "AUTHORS"
Процедура ВКаталогеИсходниковСоздаетсяФайл(Знач ПарамСтрока1) Экспорт
	 ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ВКаталогеИсходниковСоздаетсяФайл> не реализован", "Не реализовано.");
КонецПроцедуры

//в каталоге исходников не создается файл ".git"
Процедура ВКаталогеИсходниковНеСоздаетсяФайл(Знач ПарамСтрока1) Экспорт
	 ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ВКаталогеИсходниковНеСоздаетсяФайл> не реализован", "Не реализовано.");
КонецПроцедуры

Функция ИнициализироватьТестовоеХранилищеГит(Знач КаталогРепозитория, Знач КакЧистое = Ложь)

	КодВозврата = Неопределено;
	ЗапуститьПриложение("git init" + ?(КакЧистое, " --bare", ""), КаталогРепозитория, Истина, КодВозврата);
	
	Возврат КодВозврата;
	
КонецФункции

Функция ПутьКВременномуФайлуХранилища1С()
	
	Возврат ОбъединитьПути(КаталогFixtures(), "ТестовыйФайлХранилища1С.1CD");
	
КонецФункции

Функция КаталогFixtures()
	Возврат ОбъединитьПути(ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..", "tests"), "fixtures");
КонецФункции

Лог = Логирование.ПолучитьЛог(ИмяЛога());
//Лог.УстановитьУровень(Логирование.ПолучитьЛог("bdd").Уровень());
Лог.УстановитьУровень(УровниЛога.Отладка);
